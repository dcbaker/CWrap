# Copyright (c) 2014 Dylan Baker

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


=begin rdoc
Provides methods and classes to work with cmake wrapping.
=end

require './exceptions'

module CMake

  # function that wraps initial generation of the cmake wrapper
  #
  # This function is used by the initial call ./configure to create either ninja
  # files or make files (It defaults to ninja which is much faster). If ninja is
  # used it generated a makefile wrapper around ninja so that the standard make
  # interface works.

  def make_wrapper
    # The wrapperfile is probably always going to be "Makefile"
    wrapper_file = "Makefile"

    # Set the generator to use
    #
    # Prefer Ninja (which is much faster), fall back to Makefiles if necissary.
    # This doesn't affect the generation of a Unix Makefile wrapper for ninja
    if system('which ninja')
      generator = "Ninja"
    else
      generator = "Unix Makefiles"
    end

    # If we're not using make files create a wrapper make file. If using makes
    # files we're done, return
    case generator
    when "Ninja"
      build = "ninja"
      clean = "ninja clean"
      install = "ninja install"
    when "Unix Makefiles"
      return
    end

    wrapper = "
    # This makefile is automatically generated by cWrap
    all:
      #{build}

    clean:
      #{clean}

    install:
      #{install}
    "

    File.open(wrapper_file) { |f| f.write(wrapper) }
  end

end
